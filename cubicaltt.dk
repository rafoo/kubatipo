#NAME cubicaltt.
(;
   Check this file with:
   dkcheck -nl -coc cubicaltt.dk
;)

(; Main source: https://arxiv.org/pdf/1611.02108.pdf ;)
(; Author: RaphaÃ«l Cauderlier, License: UNLICENSE ;)

(;
   We implement a fragment of Cubical Type Theory (CTT) in Dedukti.
   Up to the proof of transitivity of paths.

   The main difficulty is that CTT contains an operation that extends
   conversion locally. This is not possible in Dedukti (conversion is
   only extended by toplevel rewrite rules) so the encoding is not
   totally shallow: some judgmental equalities in CTT are only
   propositional in the encoding. They are encodied by Leibnitz equality.
;)

(; Some meta logic ;)

True : Type.
True_intro : True.

False : Type.

Option : Type -> Type.
None : A : Type -> Option A.
Some : A : Type -> A -> Option A.

Bool : Type.
true : Bool.
false : Bool.

def and : Bool -> Bool -> Bool.
[] and false _ --> false
[b] and true b --> b.

def or : Bool -> Bool -> Bool.
[b] or false b --> b
[] or true _ --> true.

def isTrue : Bool -> Type.
[] isTrue true --> True
[] isTrue false --> False.

def it_fst : b1 : Bool -> b2 : Bool -> isTrue (and b1 b2) -> isTrue b1.
[H] it_fst false _ H --> H
[b,H] it_fst true b H --> True_intro.

def it_snd : b1 : Bool -> b2 : Bool -> isTrue (and b1 b2) -> isTrue b2.
[H] it_snd true _ H --> H.

def it_or_elim : Ret : Type -> b1 : Bool -> b2 : Bool ->
                 (isTrue b1 -> Ret) -> (isTrue b2 -> Ret) ->
                 isTrue (or b1 b2) -> Ret.
[g,H] it_or_elim _ false _ _ g H --> g H
[f,H] it_or_elim _ true _ f _ H --> f H.

Nat : Type.
zero : Nat.
suc : Nat -> Nat.

List : Type -> Type.
Nil : A : Type -> List A.
Cons : A : Type -> A -> List A -> List A.

Vector : Nat -> Type -> Type.
Vnil : A : Type -> Vector zero A.
Vcons : n : Nat -> A : Type -> A -> Vector n A -> Vector (suc n) A.
def vmap2 : n : Nat -> A : Type -> B : Type -> C : Type -> (A -> B -> C) -> Vector n A -> Vector n B -> Vector n C.
[C] vmap2 zero _ _ C _ _ _ --> Vnil C
[n,A,B,C,f,a,v,b,w] vmap2 _ A B C f (Vcons n _ a v) (Vcons _ _ b w) -->
  Vcons n C (f a b) (vmap2 n A B C f v w).

def head : n : Nat -> A : Type -> Vector (suc n) A -> A.
[a] head _ _ (Vcons _ _ a _) --> a.
def tail : n : Nat -> A : Type -> Vector (suc n) A -> Vector n A.
[v] tail _ _ (Vcons _ _ _ v) --> v.

(; Section 2: Basic type theory ;)

(; Universes ;)
type : Type.
def term : type -> Type.
U : type.
[] term U --> type.
(; As in the cubicaltt implementation, we take U : U
   (well, actually U : term U) ;)

(; Dependent Product ;)
Pi : A : type -> (term A -> type) -> type.
[A,B] term (Pi A B) --> x : term A -> term (B x).
def arr (A : type) (B : type) : type := Pi A (x => B).

(; Dependent Sum ;)
Sigma : A : type -> (term A -> type) -> type.
sigma : A : type -> (term A -> type) -> Type.
[A,B] term (Sigma A B) --> sigma A B.
def pair : A : type -> B : (term A -> type) ->
  a : term A -> term (B a) -> sigma A B.
def fst : A : type -> B : (term A -> type) -> sigma A B -> term A.
def snd : A : type -> B : (term A -> type) -> p : sigma A B ->
  term (B (fst A B p)).
(; beta ;)
[a] fst _ _ (pair _ _ a _) --> a.
[b] snd _ _ (pair _ _ _ b) --> b.
(; eta ;)
[A,B,p] pair A B (fst A B p) (snd A B p) --> p.
def prod (A : type) (B : type) : type := Sigma A (x => B).
def Prod (A : type) (B : type) : Type := term (prod A B).

(; Natural Numbers ;)
nat : type.
[] term nat --> Nat.
def natrec : P : (Nat -> type) ->
             term (P zero) ->
             (n : Nat -> term (P n) -> term (P (suc n))) ->
             n : Nat -> term (P n).
[a] natrec _ a _ zero --> a
[P,a,b,n] natrec P a b (suc n) --> b n (natrec P a b n).

(; Section 3: Path types ;)

(; The interval ;)

II : Type. (; this Dedukti type has no code in type ;)
0 : II.
1 : II.
def opp : II -> II.
def min : II -> II -> II.
def max : II -> II -> II.

[] opp 0 --> 1
[] opp 1 --> 0
[i] opp (opp i) --> i.
[r,s] opp (min r s) --> max (opp r) (opp s)
[r,s] opp (max r s) --> min (opp r) (opp s).
[] min 0 _ --> 0
[] min _ 0 --> 0
[i] min 1 i --> i
[i] min i 1 --> i.
[i] max 0 i --> i
[i] max i 0 --> i
[] max 1 _ --> 1
[] max _ 1 --> 1.

(; We cannot add commutativity of min and max ;)
(; We could have distributvity law but are they useful? ;)

(; Path types ;)
pathP : A : (II -> type) -> term (A 0) -> term (A 1) -> type.
PathP : A : (II -> type) -> term (A 0) -> term (A 1) -> Type.
[A,a,b] term (pathP A a b) --> PathP A a b.
def lamP : A : (II -> type) -> f : (i : II -> term (A i)) ->
  PathP A (f 0) (f 1).
def appP : A : (II -> type) -> a : term (A 0) -> b : term (A 1) ->
  PathP A a b -> i : II -> term (A i).
[a] appP _ a _ _ 0 --> a
[b] appP _ _ b _ 1 --> b
[f,i] appP _ _ _ (lamP _ f) i --> f i. (; beta ;)
[A,p] lamP A (i => appP A _ _ p i) --> p. (; eta ;)

(; special case when A is constant ;)
def path (A : type) : term A -> term A -> type := pathP (i => A).
def Path (A : type) : term A -> term A -> Type := PathP (i => A).
def lam (A : type) : f : (II -> term A) -> Path A (f 0) (f 1) :=
  lamP (i => A).
def app (A : type) :
        a : term A -> b : term A -> Path A a b -> II -> term A :=
  appP (i => A).

(; Examples ;)
def refl (A : type) (a : term A) : Path A a a := lam A (i => a).

def fun_path (A : type) (B : type) (f : term A -> term B)
             (a : term A) (a' : term A) (p : Path A a a') :
             Path B (f a) (f a') :=
  lam B (i => f (app A a a' p i)).

def funExt (A : type) (B : term A -> type)
           (f : x : term A -> term (B x))
           (g : x : term A -> term (B x))
           (p : x : term A -> Path (B x) (f x) (g x)) :
           Path (Pi A B) (x => f x) (x => g x) :=
  lam (Pi A B) (i => a => app (B a) (f a) (g a) (p a) i).

def singl (A : type) (a : term A) : type := Sigma A (path A a).

def contrSingl (A : type) (a : term A) (b : term A)
               (p : Path A a b) :
               Path (singl A a)
                 (pair A (path A a) a (refl A a))
                 (pair A (path A a) b p) :=
  lam (singl A a)
    (i => pair A (path A a) (app A a b p i)
      (lam A
        (j => app A a b p (min i j)))).

(; Section 4: Systems, composition, and transport ;)

(; 4.1 The face lattice ;)

(; Contrary to the original representation, we do not represent face
   constraints by formulae (which require handling simplification
   rules such as (i = 0) /\ (j = 1) /\ (i = 1) --> false which are
   complicated in Dedukti.

   We represent face constraints by vectors whose ith element
   indicates whether the ith dimension is 0, 1, or
   unconstrained. These lists are parameterized by their length. ;)

(; Atoms ::= true | i = 0 | i = 1 ;)
FAtom : Type.
FTrue : FAtom.
FEq0 : FAtom.
FEq1 : FAtom.

(; intersection (i.e. conjunction) of atoms yields either an atom or
   false. The type of these results is Option FAtom where None
   represents empty intersection (i.e. false). ;)

(; intersection of face atoms ;)
def FAand : FAtom -> FAtom -> Option FAtom.
[a] FAand FTrue a --> Some FAtom a
[a] FAand a FTrue --> Some FAtom a
[a] FAand a a --> Some FAtom a
[] FAand FEq0 FEq1 --> None FAtom
[] FAand FEq1 FEq0 --> None FAtom.

(; A face in n-dimensions is a n-vector of atoms ;)
def FFace (n : Nat) := Vector n FAtom.

(; FFaces are almost closed under intersection: intersecting two faces
   can yield the empty set (or false), which we do not consider as a
   face. Hence intersection of FFaces returns an FFace option. ;)
def Fcons_opt : n : Nat -> Option (FAtom) -> Option (FFace n) ->
  Option (FFace (suc n)).
[n] Fcons_opt n (None _) _ --> None (FFace (suc n))
[n] Fcons_opt n _ (None _) --> None (FFace (suc n))
[n,a,F] Fcons_opt n (Some _ a) (Some _ F) -->
  Some (FFace (suc n)) (Vcons n FAtom a F).

def FFand : n : Nat -> FFace n -> FFace n -> Option (FFace n).
[] FFand _ (Vnil _) (Vnil _) --> Some (FFace zero) (Vnil FAtom)
[n,a,b,F,G] FFand _ (Vcons n _ a F) (Vcons _ _ b G) -->
  Fcons_opt n (FAand a b) (FFand n F G).

(; an union of faces is a list of faces ;)

def FF (n : Nat) := List (FFace n).

def eval_atom : FAtom -> II -> II.
[i] eval_atom FTrue i --> i
[] eval_atom FEq0 _ --> 0
[] eval_atom FEq1 _ --> 1.

def eval_FFace (n : Nat) : FFace n -> Vector n II -> Vector n II :=
  vmap2 n FAtom II II eval_atom.

Atom_Holds : FAtom -> II -> Type.
AH0 : Atom_Holds FEq0 0.
AH1 : Atom_Holds FEq1 1.
AHT : i : II -> Atom_Holds FTrue i.

Face_Holds : n : Nat -> FFace n -> Vector n II -> Type.
FHnil : Face_Holds zero (Vnil FAtom) (Vnil II).
FHcons : n : Nat -> a : FAtom -> phi : FFace n ->
         i : II -> is : Vector n II ->
         Atom_Holds a i -> Face_Holds n phi is ->
         Face_Holds (suc n) (Vcons n FAtom a phi) (Vcons n II i is).

Holds : n : Nat -> FF n -> Vector n II -> Type.
HLeft : n : Nat -> phi : FFace n -> Phi : FF n -> is : Vector n II ->
        Face_Holds n phi is -> Holds n (Cons (FFace n) phi Phi) is.
HRight : n : Nat -> phi : FFace n -> Phi : FF n -> is : Vector n II ->
         Holds n Phi is -> Holds n (Cons (FFace n) phi Phi) is.

def atom_simpl : FAtom -> II -> Bool.
[] atom_simpl FTrue _ --> true
[] atom_simpl FEq0 0 --> true
[] atom_simpl FEq0 1 --> false
[] atom_simpl FEq1 0 --> false
[] atom_simpl FEq1 1 --> true.

def atom_simpl_correct : a : FAtom -> i : II -> isTrue (atom_simpl a i) ->
                         Atom_Holds a i.
[i] atom_simpl_correct FTrue i _ --> AHT i
[] atom_simpl_correct FEq0 0 _ --> AH0
[] atom_simpl_correct FEq1 1 _ --> AH1.

def face_simpl : n : Nat -> FFace n -> Vector n II -> Bool.
[] face_simpl zero (Vnil _) (Vnil _) --> true
[n,a,phi,i,is] face_simpl _ (Vcons n _ a phi) (Vcons _ _ i is) -->
  and (atom_simpl a i) (face_simpl n phi is).

def face_simpl_correct : n : Nat -> phi : FFace n -> is : Vector n II ->
                         isTrue (face_simpl n phi is) -> Face_Holds n phi is.
[] face_simpl_correct zero (Vnil _) (Vnil _) _ --> FHnil
[n,a,phi,i,is,H] face_simpl_correct _ (Vcons n _ a phi) (Vcons _ _ i is) H -->
  FHcons n a phi i is
         (atom_simpl_correct a i (it_fst (atom_simpl a i) (face_simpl n phi is) H))
         (face_simpl_correct n phi is
                             (it_snd (atom_simpl a i) (face_simpl n phi is) H)).

def FF_simpl : n : Nat -> FF n -> Vector n II -> Bool.
[] FF_simpl _ (Nil _) _ --> false
[n,phi,Phi,is] FF_simpl n (Cons _ phi Phi) is -->
  or (face_simpl n phi is) (FF_simpl n Phi is).

def FF_simpl_correct : n : Nat -> Phi : FF n -> is : Vector n II ->
                       isTrue (FF_simpl n Phi is) -> Holds n Phi is.
[n,phi,Phi,is] FF_simpl_correct n (Cons _ phi Phi) is -->
  it_or_elim (Holds n (Cons (FFace n) phi Phi) is)
   (face_simpl n phi is)
   (FF_simpl n Phi is)
   (H => HLeft n phi Phi is (face_simpl_correct n phi is H))
   (H => HRight n phi Phi is (FF_simpl_correct n Phi is H)).

def one := suc zero.
def two := suc one.

def i0 : FFace one := Vcons zero FAtom FEq0 (Vnil FAtom).
def i1 : FFace one := Vcons zero FAtom FEq1 (Vnil FAtom).

(;

   Î, Ï â¢ a : A where Ï is a face in an n-dimensional space and A is
   an n-dimensional type is represented by Î â¢ a : face_term n phi A.

   ;)

def ntype (n : Nat) : Type := Vector n II -> type.

def face_term (n : Nat) (phi : FFace n) (A : ntype n) : Type :=
  is : Vector n II -> term (A (eval_FFace n phi is)).

(; 4.2 Syntax and inference rules for systems ;)

(;

  A presystem in dimension n and type A is a list of pairs (Ï, t) such that:
  - Ï is a face in dimension n,
  - t : face_term n Ï A,
  - for any pairs (Ï, t) and (Ï, u) in the system, t and u agree on Ï â§ Ï,

  To check that t and u agree on Ï â§ Ï, we have two cases to consider,
  if the intersection (Ï â§ Ï) is empty, we have nothing to check,
  otherwise we compare t restricted to Ï â§ Ï and u restricted to Ï â§ Ï
  using a variant of the heterogeneous equality (aka. John Major
  Equality) defined as a partial function.

;)

def term_opt : n : Nat -> phi : Option (FFace n) -> A : ntype n -> Vector n II ->
               Type.
(; In the None case, we could use any inhabited type, the important
   thing is that eval_face_opt always choose the same inhabitant, no
   matter what the other arguments are ;)
[] term_opt _ (None _) _ _ --> True
[n,phi,A,is] term_opt n (Some _ phi) A is --> term (A (eval_FFace n phi is)).

def eval_face_opt : n : Nat -> phi : Option (FFace n) -> A : ntype n ->
                    (is : Vector n II -> term (A is)) ->
                    (is : Vector n II -> term_opt n phi A is).
[] eval_face_opt _ (None _) --> A => a => is => True_intro
[n,phi,A,is,a] eval_face_opt n (Some _ phi) --> A => a => is => a (eval_FFace n phi is).

def My_JMeq : Ret : Type -> A : Type -> B : Type -> a : A -> b : B -> Type.
[Ret,A,a] My_JMeq Ret A A a a --> Ret.
(; This is a partial function, assuming we know how to inhabit Ret, we
   have a way to inhabit My_JMeq Ret A B a b IFF A == B and a == b. ;)

(; Same but eta-expanse vectors to make more terms convertible. ;)
def My_JMeq_vect : Ret : Type -> n : Nat ->
                   A : (Vector n II -> Type) -> B : (Vector n II -> Type) ->
                   a : (is : Vector n II -> A is) ->
                   b : (is : Vector n II -> B is) -> Type.
[Ret,A,B,a,b] My_JMeq_vect Ret zero A B a b -->
  My_JMeq Ret (A (Vnil II)) (B (Vnil II)) (a (Vnil II)) (b (Vnil II))
[Ret,n,A,B,a,b] My_JMeq_vect Ret (suc n) A B a b -->
  My_JMeq_vect Ret n
    (is => i : II -> A (Vcons n II i is))
    (is => i : II -> B (Vcons n II i is))
    (is => i => a (Vcons n II i is))
    (is => i => b (Vcons n II i is)).


(; System and consable are defined by Induction-Recursion ;)
System : n : Nat -> ntype n -> Phi : FF n -> Type.
def consable : n : Nat -> A : ntype n -> Phi : FF n -> phi : FFace n ->
               face_term n phi A -> System n A Phi -> Type.
prenil : n : Nat -> A : ntype n -> System n A (Nil (FFace n)).
precons : n : Nat -> A : ntype n -> Phi : FF n ->
  phi : FFace n ->
  t : face_term n phi A ->
  s : System n A Phi ->
  consable n A Phi phi t s ->
  System n A (Cons (FFace n) phi Phi).

[] consable _ _ _ _ _ (prenil _ _) --> True
[n,A,Phi,phi,t,psi,u,s] consable n A _ phi t (precons _ _ Phi psi u s _) -->
  My_JMeq_vect (consable n A Phi phi t s) n
    (is : Vector n II => term_opt n (FFand n phi psi) (is => A (eval_FFace n phi is)) is)
    (is : Vector n II => term_opt n (FFand n phi psi) (is => A (eval_FFace n psi is)) is)
    (eval_face_opt n (FFand n phi psi) (is => A (eval_FFace n phi is)) t)
    (eval_face_opt n (FFand n phi psi) (is => A (eval_FFace n psi is)) u).

def atom_term_Holds : A : (II -> type) ->
                      a : FAtom -> i : II -> Atom_Holds a i ->
                      term (A (eval_atom a i)) -> term (A i).
[t] atom_term_Holds _ FTrue _ _ t --> t
[t] atom_term_Holds _ FEq0 0 _ t --> t
[t] atom_term_Holds _ FEq1 1 _ t --> t.

def face_term_Holds : n : Nat -> A : ntype n -> phi : FFace n ->
                      face_term n phi A -> is : Vector n II ->
                      Face_Holds n phi is -> term (A is).
[t] face_term_Holds zero _ (Vnil _) t (Vnil _) _ --> t (Vnil II)
[A,n,a,phi,t,i,is,H1,H2]
  face_term_Holds (suc n) A (Vcons _ _ a phi) t (Vcons _ _ i is) (FHcons _ _ _ _ _ H1 H2)
    -->
  atom_term_Holds (i => A (Vcons n II i is)) a i
    H1
    (face_term_Holds n
      (is => A (Vcons n II (eval_atom a i) is))
      phi
      (is => t (Vcons n II i is))
      is
      H2).

def System_Holds : n : Nat -> A : ntype n -> Phi : FF n ->
                   System n A Phi -> is : Vector n II ->
                   Holds n Phi is -> term (A is).
[n,A,phi,t,is,H]
  System_Holds n A (Cons _ phi _) (precons _ _ _ _ t _ _) is (HLeft _ _ _ _ H)
    -->
  face_term_Holds n A phi t is H
[n,A,Phi,s,is,H]
  System_Holds n A (Cons _ _ Phi) (precons _ _ _ _ _ s _) is (HRight _ _ _ _ H)
    -->
  System_Holds n A Phi s is H.

def compatible_term : n : Nat -> A : ntype n -> Phi : FF n -> System n A Phi ->
                      (is : Vector n II -> term (A is)) -> Type.


[] compatible_term _ _ _ (prenil _ _) _ --> True
[n,A,Phi,phi,u,s,a] compatible_term n A _ (precons _ _ Phi phi u s _) a -->
  My_JMeq_vect (compatible_term n A Phi s a) n
    (is => term (A (eval_FFace n phi is)))
    (is => term (A (eval_FFace n phi is)))
    u
    (is => a (eval_FFace n phi is)).


(; 4.3 Composition operation ;)

def comp : n : Nat ->           (; The dimension of the base ;)
           A : (II -> ntype n) ->
           Phi : FF n ->
           u : (i : II -> System n (A i) Phi) ->
           a0 : (is : Vector n II -> term (A 0 is)) ->
           compatible_term n (A 0) Phi (u 0) a0 ->
           is : Vector n II -> term (A 1 is).

def comp_compatible : n : Nat ->
                      A : (II -> ntype n) ->
                      Phi : FF n ->
                      u : (i : II -> System n (A i) Phi) ->
                      a0 : (is : Vector n II -> term (A 0 is)) ->
                      H : compatible_term n (A 0) Phi (u 0) a0 ->
                      compatible_term n (A 1) Phi (u 1) (comp n A Phi u a0 H).

(; We encode the conditional rule
   [...] comp n A Phi u a0 H is ? FF_simpl Phi = True --> System_Holde ... u
 ;)
def comp_aux : n : Nat -> A : (II -> ntype n) -> Phi : FF n ->
               u : (i : II -> System n (A i) Phi) ->
               a0 : (is : Vector n II -> term (A 0 is)) ->
               compatible_term n (A 0) Phi (u 0) a0 ->
               is : Vector n II ->
               T : Type ->
               (T -> term (A 1 is)) -> term (A 1 is).
[F] comp_aux _ _ _ _ _ _ _ True F --> F True_intro.
[n,A,Phi,u,a0,H,is] comp n A Phi u a0 H is -->
   comp_aux n A Phi u a0 H is (isTrue (FF_simpl n Phi is))
   (Hit => System_Holds n (A 1) Phi (u 1) is (FF_simpl_correct n Phi is Hit)).

def trans_Phi : FF one :=
  Cons (FFace one) i0 (Cons (FFace one) i1 (Nil (FFace one))).

def trans_u (j : II) (A : type) (a : term A) (b : term A) (c : term A)
            (q : Path A b c) : System one (is => A) trans_Phi :=
  precons one (is => A) (Cons (FFace one) i1 (Nil (FFace one))) i0 (is => a)
  (precons one (is => A) (Nil (FFace one)) i1 (is => app A b c q j)
  (prenil one (is => A))
  True_intro)
  True_intro.

(; Finally, the transitivity lemma ;)

def trans (A : type) (a : term A) (b : term A) (c : term A)
          (p : Path A a b) (q : Path A b c) : Path A a c :=
  lam A
    (i : II =>
      comp one (j => is => A)
        trans_Phi
        (j => trans_u j A a b c q)
        (is => app A a b p (head zero II is))
        True_intro
        (Vcons zero II i (Vnil II))).

(; 4.4 Kan filling operation ;)

def incr_dimension : n : Nat -> FF n -> FF (suc n).
[n] incr_dimension n (Nil _) --> Nil (FFace (suc n))
[n,phi,Phi] incr_dimension n (Cons _ phi Phi) -->
  Cons (FFace (suc n))
   (Vcons n FAtom FTrue phi)
   (incr_dimension n Phi).

def full_face : n : Nat -> FFace n.
[] full_face zero --> Vnil FAtom
[n] full_face (suc n) --> Vcons n FAtom FTrue (full_face n).

def full_face_term : n : Nat -> A : ntype n -> (is : Vector n II -> term (A is)) ->
                     face_term n (full_face n) A.
[t] full_face_term zero _ t (Vnil _) --> t (Vnil II)
[n,A,t,i,is] full_face_term (suc n) A t (Vcons _ _ i is) -->
  full_face_term n (is => A (Vcons n II i is))
  (is => t (Vcons n II i is)) is.

def Vcons_Eq0_term : n : Nat -> A : (II -> ntype n) -> phi : FFace n ->
                     a0 : face_term n phi (A 0) ->
                     face_term (suc n) (Vcons n FAtom FEq0 phi)
                       (is => A (head n II is) (tail n II is)).


(; fillâ± A [Ï â¦ u] aâ := compÊ² A(i:=iâ§j) [i=0 â¦ aâ, Ï â¦ u(i:=iâ§j)] aâ ;)

def fill_A (n : Nat) (A : II -> ntype n) (j : II) (is : Vector (suc n) II) : type :=
  A (min (head n II is) j) (tail n II is).

def fill_Phi (n : Nat) (Phi : FF n) : FF (suc n) :=
  Cons (FFace (suc n)) (Vcons n FAtom FEq0 (full_face n)) (incr_dimension n Phi).

def fill_u (j : II) (n : Nat) (A : II -> ntype n) (Phi : FF n)
           (u : i : II -> System n (A i) Phi)
           (a0 : is : Vector n II -> term (A 0 is))
           (H : compatible_term n (A 0) Phi (u 0) a0) :
           System (suc n) (fill_A n A j) (fill_Phi n Phi) :=
  precons (suc n) (fill_A n A j)
    (incr_dimension n Phi)
    (Vcons n FAtom FEq0 (full_face n))
    (Vcons_Eq0_term n A (full_face n) (full_face_term n (A 0) a0))
    u
    H.


precons : n : Nat -> A : ntype n -> Phi : FF n ->
  phi : FFace n ->
  t : face_term n phi A ->
  s : System n A Phi ->
  consable n A Phi phi t s ->
  System n A (Cons (FFace n) phi Phi).


def fill (n : Nat) (i : II) (A : II -> ntype n) (Phi : FF n)
         (u : i : II -> System n (A i) Phi)
         (a0 : is : Vector n II -> term (A 0 is))
         (H : compatible_term n (A 0) Phi (u 0) a0)
         is : Vector n II -> term (A i is) :=
  comp (suc n) (fill_A n A)
    
    (j =>
      precons (suc n) (fill_A n A j) (Cons (FFace